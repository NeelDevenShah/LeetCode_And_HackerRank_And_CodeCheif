import java.util.ArrayList;
import java.util.List;

public class CombinationSum {
	public static void main(String [] args)
	{
		int arr[]=new int[] {2, 3, 6, 7};
		int target=7;
		System.out.println(combinationSumAns(arr, target));
	}
	
	public static List<List<Integer>> combinationSumAns(int[] candidates, int target)
	{
		List<List<Integer>> ans=new ArrayList<>();
		findCombinations(0, candidates, target, ans, new ArrayList<>());
		return ans;
	}
	
	public static void findCombinations(int ind, int[] arr, int target, List<List<Integer>> ans, List<Integer> ds)
	{
		if(ind==arr.length)
		{
			if(target==0)
			{
				ans.add(new ArrayList<>(ds));
				return;
			}
			else {
				return;
			}
		}
		
		if(arr[ind]<=target)
		{
			ds.add(arr[ind]);
			findCombinations(ind, arr, target-arr[ind], ans, ds);
			//Here There is Usage Of Good Level Of Logic, Here On Calling The ind==arr.length's if, We Save Information In The ans List, And We Send That To The
			//Main Function As The Answer, And The ds list is for reference, One The ds is added to the ans list, Than if we make any change in ds will not affect the ans list
			//And by this method, we can also get the more possible combinations of the given number
			//Hence, By removing the element from the ds list will not affect the our ans list
			ds.remove(ds.size()-1);
		}
		else {
			findCombinations(ind+1, arr, target, ans, ds);
		}
	}
}
