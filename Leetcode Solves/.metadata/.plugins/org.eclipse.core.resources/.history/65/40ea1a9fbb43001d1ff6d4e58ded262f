public class SudokoSolver {
	public static void main(String [] args)
	{
		
	}
	
	public void solveSudoku(char[][] board)
	{
		if(board==null || board.length==0){
			return;
		}
		solve(board);
	}
	
	public static boolean solve(char[][] board)
	{
		for(int i=0;i<board.length;i++)
		{
			for(int j=0;j<board[0].length;j++)
			{
				if(board[i][j]=='.')
				{
					//Trial. Try 1 Through 9
					for(char c='1';c<='9';c++)
					{
						if(isValid(board, i, j, c))
						{
							board[i][j]=c; //Put c In This Cell
							if(solve(board))
							{
								//If It's Solution Return Back
								return true;
							}
							else {
								//Otherwise Go Back
								board[i][j]='.';
							}
						}
					}
					return false;
				}
			}
		}
		return true;
	}
	
	public static boolean isValid(char[][] board, int row, int col, char c)
	{
		for(int i=0;i<9;i++)
		{
			//Check Rows
			if(board[i][col]==c)
			{
				return false;
			}
			//Check Columns
			if(board[row][i]==c)
			{
				return false;
			}
			//Check 3*3 blocks
			if(board[3*(row/3) + i/3][3*(col/3) + i%3]==c)
			{
				return false;
			}
		}
		return true;
	}
}
