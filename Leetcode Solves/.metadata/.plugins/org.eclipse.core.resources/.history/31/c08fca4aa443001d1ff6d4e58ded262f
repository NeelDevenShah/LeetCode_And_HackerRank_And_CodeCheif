public class NextPermutation {
	//Lexicographical order means in increasing order of the number
	//Example:
		//123 -> 132 -> 213 -> 231 -> 312 -> 321
	//There Are Two Method To Solve This Problem
	//1.(Not Preferred) By Listing All Permutation lexicographically wise and than select the next one to the given one
	//2.(Preferred) By Using Algorithm Of Permutation
		//Algorithm Is As Shown Below:
		//Step 1: Find First Decreasing Sequence Starting From End
		//Step 2: Find Number For Substitution And Perform Swap
		//Step 3: Rearrange Remaining Array By Reversing It(i.e. Increasing Order From Reverse Order)
	
		//And If Already Given The Largest Lexicographical Order, Than Find Lowest One
	public static void main(String [] args)
	{
		int A[]=new int[] {1, 2, 3};
		for(int i=0;i<A.length;i++)
		{
			System.out.print(A[i]);
		}
		nextPermutationsol(A);
		for(int i=0;i<A.length;i++)
		{
			System.out.print(A[i]);
		}
	}
	
	public static void nextPermutationsol(int[] A)
	{
		if(A==null || A.length<=1)
		{
			return;
		}
		int i=A.length-2;
		while(i>=0 && A[i]>=A[i+1])
		{
			i--;
		}
		if(i>=0)
		{
			int j=A.length-1;
			while(A[j]<=A[i])
			{
				j--;
			}
			swap(A, i,j);
		}
		reverse(A, i+1, A.length-1);
	}
	
	public static void swap(int[] A, int i, int j)
	{
		int temp=A[i];
		A[i]=A[j];
		A[j]=temp;
	}
	
	public static void reverse(int[] A, int i, int j)
	{
		while(i<j)
		{
			swap(A, i++, j--);
		}
	}
}
