import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class CombinationSum2 {
	public static void main(String [] args)
	{
		int arr[]=new int[] {10,1,2,7,6,1,5};
		int target=8;
		System.out.println(combinationSum2(arr, target));
	}
	
	public static List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        LinkedList<Integer> comb = new LinkedList<>();

        Arrays.sort(candidates);

        backtrack(candidates, comb, target, 0, results);
        return results;
    }

    private static void backtrack(int[] candidates, LinkedList<Integer> comb, Integer remain, Integer curr, List<List<Integer>> results) {
        if (remain == 0) 
        {
            // copy the current combination to the final list.
        	if(results.contains(comb))
        	{
        		results.add(new ArrayList<Integer>(comb));
                return;
        	}
//        	else {
//        		return;
//        	}
        }

        for (int nextCurr=curr;nextCurr<candidates.length;++nextCurr)
        {

            Integer pick = candidates[nextCurr];
            // optimization: early stopping
            if (remain - pick < 0)
                break;

            comb.addLast(pick);
            backtrack(candidates, comb, remain - pick, nextCurr + 1, results);
            comb.removeLast();
        }
    }
}
