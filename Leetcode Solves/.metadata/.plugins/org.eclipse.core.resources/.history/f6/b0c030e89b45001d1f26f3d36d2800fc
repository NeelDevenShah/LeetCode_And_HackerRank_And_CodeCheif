import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
/*
 * Rules Of N-Queens In Chess board
 * 	1. Every row should have one Queen
 * 	2. Every column should have one Queen
 * 	3. No two queens can attack Each Other
 * 
 * 	=>Queen Can Attack In Eight Directions
 *		  \ | /		
 * 		  - Q -
 * 		  / | \
 * 
 * ==>The Above Problem Can Be Solved By Two Ways:
 * 	1. Using concept of Backtracking, We will place Queen at different positions of the chess board and find the right arrangement where all the n queens can be placed on the n*n grid
 * 		//And In backtracking, After adding element and making it to call the function again, than we have to remove that added element and than make add the another possibility to be 
 * 		checked, So that if the first one is not possible, than the second one can be made
 * 	2. Optimization of the upper method, We need O(N) for row, O(N) for column, and O(N) for diagonal.Here we will use hashing to maintain a list to check whether that position can be
 * 	   the right one or not
 */
public class NQueens {
	public static void main(String [] args)
	{
		int n=4;
		List<List<String>> queen=solveNQueens(n);
		int i=1;
		for(List<String> it : queen)
		{
			System.out.println("Arrangment "+i);
			for(String s : it)
			{
				System.out.print(s);
			}
			System.out.println();
			i+=1;
		}
	}
	
	public static List<List<String>> solveNQueens(int n)
	{
		char[][] board=new char[n][n];
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				board[i][j]='.';
			}
		}
		List<List<String>> ans=new ArrayList<List<String>>();
		solve(0, board, ans, n);
		return ans;
	}
	
	public static List<String> construct(char[][] board)
	{
		List<String> ans=new LinkedList<>();
		for(int i=0;i<board.length;i++)
		{
			String s=new String(board[i]);
			ans.add(s);
			System.out.println(s);
		}
		return ans;
	}
	
	public static boolean isSafe(char[][] board, int row, int col)
	{
		int duprow=row;
		int dupcol=col;
		
		//For Diagonal Before The Present Position In Upper Direction
		while(row>=0 && col>=0)
		{
			if(board[row][col]=='Q'){
				return false;
			}
			//As We have to check before the position from where we are, not after the position
			row--;
			col--;
		}
		
		row=duprow;
		col=dupcol;
		while(col>=0)
		{
			if(board[row][col]=='Q') {
				return false;
			}
			//As We have to check before the position from where we are, not after the position
			col--;
		}
		
		//For Diagonal Present Before The Present Position In Upper Direction
		row=duprow;
		col=dupcol;
		while(col>=0 && row<board.length)
		{
			if(board[row][col]=='Q') {
				return false;
			}
			row++;
			col--;
		}
		return true;
	}
	
	public static void solve(int col, char[][] board, List<List<String>> ans, int n)
	{
		if(col==n){
			ans.add(construct(board));
		}
		
		for(int row=0;row<board.length;row++)
		{
			if(isSafe(board, row, col))
			{
				board[row][col]='Q';
				solve(col+1, board, ans, n);
				board[row][col]='.';
			}
		}
	}
	
}
