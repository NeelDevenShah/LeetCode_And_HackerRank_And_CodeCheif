public class SudokoSolver {
	public static void main(String [] args)
	{
		char arr[][]=new char[9][9];
		arr[0][0]='5';arr[0][1]='3';arr[0][2]='.';arr[0][3]='.';arr[0][4]='7';arr[0][5]='.';arr[0][6]='.';arr[0][7]='.';arr[0][8]='.';
		arr[1][0]='6';arr[1][1]='.';arr[1][2]='.';arr[1][3]='1';arr[1][4]='9';arr[1][5]='5';arr[1][6]='.';arr[1][7]='.';arr[1][8]='.';
		arr[2][0]='.';arr[2][1]='9';arr[2][2]='8';arr[2][3]='.';arr[2][4]='.';arr[2][5]='.';arr[2][6]='.';arr[2][7]='6';arr[2][8]='.';
		arr[3][0]='8';arr[3][1]='.';arr[3][2]='.';arr[3][3]='.';arr[3][4]='6';arr[3][5]='.';arr[3][6]='.';arr[3][7]='.';arr[3][8]='3';
		arr[4][0]='4';arr[4][1]='.';arr[4][2]='.';arr[4][3]='8';arr[4][4]='.';arr[4][5]='3';arr[4][6]='.';arr[4][7]='.';arr[4][8]='1';
		arr[5][0]='7';arr[5][1]='.';arr[5][2]='.';arr[5][3]='.';arr[5][4]='2';arr[5][5]='.';arr[5][6]='.';arr[5][7]='.';arr[5][8]='6';
		arr[6][0]='.';arr[6][1]='6';arr[6][2]='.';arr[6][3]='.';arr[6][4]='.';arr[6][5]='.';arr[6][6]='2';arr[6][7]='8';arr[6][8]='.';
		arr[7][0]='.';arr[7][1]='.';arr[7][2]='.';arr[7][3]='4';arr[7][4]='1';arr[7][5]='9';arr[7][6]='.';arr[7][7]='.';arr[7][8]='5';
		arr[8][0]='.';arr[8][1]='.';arr[8][2]='.';arr[8][3]='.';arr[8][4]='8';arr[8][5]='.';arr[8][6]='.';arr[8][7]='7';arr[8][8]='9';
	
		solveSudoku(arr);
		for(int i=0;i<9;i++)
		{
			for(int j=0;j<9;j++)
			{
				System.out.print(arr[i][j]);
			}
			System.out.println("");
		}
		
	}
	
	public static void solveSudoku(char[][] board)
	{
		if(board==null || board.length==0){
			return;
		}
		solve(board);
	}
	
	public static boolean solve(char[][] board)
	{
		for(int i=0;i<board.length;i++)
		{
			for(int j=0;j<board[0].length;j++)
			{
				if(board[i][j]=='.')
				{
					//Trial. Try 1 Through 9
					for(char c='1';c<='9';c++)
					{
						if(isValid(board, i, j, c))
						{
							board[i][j]=c; //Put c In This Cell
							if(solve(board))
							{
								//If It's Solution Return Back
								return true;
							}
							else {
								//Otherwise Go Back
								board[i][j]='.';
							}
						}
					}
					return false;
				}
			}
		}
		return true;
	}
	
	public static boolean isValid(char[][] board, int row, int col, char c)
	{
		System.out.println(*);
		for(int i=0;i<9;i++)
		{
			//Check Rows
			if(board[i][col]==c)
			{
				return false;
			}
			//Check Columns
			if(board[row][i]==c)
			{
				return false;
			}
			//Check 3*3 blocks
			//Here, There is unique usage of the modulo operator, In this usage, Example 8%3 which will give 2,which is number more than the required for num%3==0
			//So, i%3's answer will be always 0 or 1 or 2 (As we required)
			System.out.println("a"+row);
			System.out.println("b"+3*(row/3));
			if(board[3*(row/3) + i/3][3*(col/3) + i%3]==c)
			{
				return false;
			}
		}
		return true;
	}
}
