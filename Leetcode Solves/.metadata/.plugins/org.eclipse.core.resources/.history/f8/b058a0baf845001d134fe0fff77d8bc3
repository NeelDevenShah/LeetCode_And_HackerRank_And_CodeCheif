import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class QueenTemp {
	public static void main(String [] args)
	{
		int n=4;
		List<List<String>> queen=solveNQueen(n);
		int i=1;
		for(List<String> it : queen)
		{
			System.out.println("Arrangment "+i);
			for(String s : it)
			{
				System.out.print(s);
			}
			System.out.println("");
			i++;
		}
	}
	
	public static List<List<String>> solveNQueen(int n)
	{
		char[][] board=new char[n][n];
		List<List<String>> ans=new ArrayList<>();
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				board[i][j]='.';
			}
		}
		solve(0, board, ans, n);
		return ans;
	}
	
	public static void solve(int col, char[][] board, List<List<String>> ans, int n)
	{
		if(col==n)
		{
			ans.add(construct(board));
		}
			
		for(int row=0;row<n;row++)
		{
			if(isSafe(board, row, col, n))
			{
				board[row][col]='Q';
				solve(col+1, board, ans, n);
				board[row][col]='.';
			}
		}
			
	}
	
	public static boolean isSafe(char[][] board, int row, int col, int n)
	{
		int duprow=row;
		int dupcol=col;
		
		while(row>=0 && col>=0)
		{
			if(board[row][col]=='Q')
			{
				return false;
			}
			row--;
			col--;
		}
		
		row=duprow;
		col=dupcol;
		while(col>=0)
		{
			if(board[row][col]=='Q')
			{
				return false;
			}
			col--;
		}
		
		row=duprow;
		col=dupcol;
		while(row>=0 && col>=0)
		{
			if(board[row][col]=='Q')
			{
				return false;
			}
			row++;
			col--;
		}
		return true;
	}
	
	public static List<String> construct(char[][] board)
	{
		List<String> ans=new LinkedList<>();
		for(int i=0;i<board.length;i++)
		{
			String s=new String(board[i]);
			ans.add(s);
		}
		return ans;
	}
	
}
